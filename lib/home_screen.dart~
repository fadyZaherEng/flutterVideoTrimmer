import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_video_trimmer/config/theme/color_schemes.dart';
import 'package:flutter_video_trimmer/core/resources/image_paths.dart';
import 'package:flutter_video_trimmer/core/utils/trimmer_utils.dart';
import 'package:flutter_video_trimmer_test/video_trimmer_screen.dart';
import 'package:image_picker/image_picker.dart';
import 'package:video_player/video_player.dart';
import 'package:video_thumbnail/video_thumbnail.dart';

class HomeScreen extends StatefulWidget {
  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  File? selectedVideo;
  VideoPlayerController? videoPlayerController;
  final int _maxVideoDuration = 10;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Flutter Video Trimmer"),
      ),
      body: Center(
        child: Column(
          children: [
            ElevatedButton(
              child: const Text("LOAD VIDEO FROM GALLERY"),
              onPressed: () async {
                await _getVideo(ImageSource.gallery);
              },
            ),
            //show video player
            selectedVideo != null
                ? SizedBox(
                    height: 200,
                    width: 200,
                    child: VideoPlayer(
                      videoPlayerController!,
                    ),
                  )
                : Container(),
          ],
        ),
      ),
    );
  }

  Future<void> _getVideo(
    ImageSource img,
  ) async {
    final ImagePicker picker = ImagePicker();
    final pickedFile = await picker.pickVideo(
        source: img,
        maxDuration: Duration(
          seconds: _maxVideoDuration,
        ));
    XFile? videoFile = pickedFile;
    if (videoFile == null) {
      return;
    }
    selectedVideo = File(videoFile.path);
    debugPrint("Video Path: ${selectedVideo!.path}");
    videoPlayerController = VideoPlayerController.file(
      selectedVideo!,
    )..initialize().then(
        (_) {
          if (videoPlayerController == null) {
            return;
          }
          if (videoPlayerController!.value.duration.inSeconds >
              _maxVideoDuration) {
            Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => VideoTrimmerScreen(
                    file: selectedVideo!,
                    maxDuration: _maxVideoDuration,
                  ),
                )).then((value) {
              if (value != null) {
                selectedVideo = null;
                videoPlayerController = null;
                selectedVideo = File(value as String);
                videoPlayerController = VideoPlayerController.file(
                  selectedVideo!,
                )..initialize().then((_) {
                    setState(() {});
                  });
              }
            });
          } else {
            showDialog(
              context: context,
              builder: (context) => AlertDialog(
                title: const Text("Video is too short"),
                content: const Text("Please choose another video"),
                actions: <Widget>[
                  TextButton(
                    child: const Text("OK"),
                    onPressed: () {
                      Navigator.of(context).pop();
                    },
                  ),
                ],
              ),
            );
          }
        },
      );
  }

  Widget _videoWidget()async {
    return videoPlayerController == null
        ? const SizedBox.shrink()
        : videoPlayerController!.value.isInitialized
            ? Stack(
                alignment: Alignment.center,
                children: [
                  Padding(
                    padding: const EdgeInsets.all(12),
                    child: Stack(
                      clipBehavior: Clip.none,
                      children: [
                        Container(
                          width: double.infinity,
                          height: 150,
                          clipBehavior: Clip.hardEdge,
                          decoration: BoxDecoration(
                              borderRadius: BorderRadius.circular(8),
                              color: Colors.grey),
                          child: SizedBox(
                            height: 150,
                            child: FutureBuilder<Uint8List?>(
                              future:   VideoThumbnail.thumbnailData(
                              video: selectedVideo!.path,
                              imageFormat: ImageFormat.JPEG,
                              maxWidth: 128,
                              quality: 100,
                            ),
                              builder: (BuildContext context,
                                  AsyncSnapshot<Uint8List?> snapshot) {
                                if (snapshot.connectionState ==
                                        ConnectionState.done &&
                                    snapshot.data != null) {
                                  return Image.memory(
                                    snapshot.data!,
                                    fit: BoxFit.cover,
                                    width: double.infinity,
                                    height: double.infinity,
                                  );
                                } else if (snapshot.error != null) {
                                  return Icon(Icons.error);
                                } else {
                                  return const Center(
                                      child: CircularProgressIndicator());
                                }
                              },
                            ),
                          ),
                        ),
                       ],
                    ),
                  ),
                  InkWell(
                    onTap: () {
                      _navigateToPlayVideoScreenEvent(
                          selectedVideo, videoPlayerController!);
                    },
                    child: SvgPicture.asset(
                      fit: BoxFit.scaleDown,
                      ImagePaths.play,
                      color: Colors.white,
                      width: 45,
                      height: 45,
                    ),
                  ),
                  Positioned.directional(
                    end: 18,
                    bottom: 18,
                    textDirection: Directionality.of(context),
                    child: Text(
                      "${videoPlayerController!.value.position.inSeconds} / ${videoPlayerController!.value.duration.inSeconds}",
                      style: Theme.of(context).textTheme.bodyMedium!.copyWith(
                            color: ColorSchemes.white,
                          ),
                    ),
                  ),
                ],
              )
            : const SizedBox.shrink();
  }
}
